name: Fetch and Process Data

on:
#  schedule:
#    - cron: '0 * * * *'
  workflow_dispatch:

env:
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
  DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}
  DAGSHUB_REPO_NAME: ${{ secrets.DAGSHUB_REPO_NAME }}

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest

    outputs:
      sha_new: ${{ steps.sha_new.outputs.SHA_NEW }}

    steps:

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Prerequisites
        run: |
          python -m pip install --upgrade pip
          pip install  poetry 
          pip install dvc[s3]

      - name: DVC setup
        run: |
          dvc remote modify origin --local access_key_id ${{ secrets.DVC_ACCESS_KEY_ID }}
          dvc remote modify origin --local secret_access_key ${{ secrets.DVC_SECRET_ACCESS_KEY }}
          dvc pull -r origin

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run tests
        run: |
          poetry run poe test_api

      - name: Fetch data
        run: |
          poetry run poe fetch_data

      - name: Commit and push fetched data
        run: |
          dvc add data
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git pull
          git diff-index --quiet HEAD || (git commit -a -m "action: fetch latest data" --allow-empty)
          dvc push -r origin
          git push

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  process:
    runs-on: ubuntu-latest
    needs: fetch

    outputs:
        sha_process: ${{ steps.sha_process.outputs.SHA_PROCESS }}

    steps:

      - env:
          SHA_NEW: ${{ needs.fetch.outputs.sha_new }}
        run: echo "$SHA_NEW"

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Prerequisites
        run: |
          python -m pip install --upgrade pip
          pip install  poetry 
          pip install dvc[s3]

      - name: DVC setup
        run: |
          dvc remote modify origin --local access_key_id ${{ secrets.DVC_ACCESS_KEY_ID }}
          dvc remote modify origin --local secret_access_key ${{ secrets.DVC_SECRET_ACCESS_KEY }}

      - name: Pull data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull

      - name: DVC pull
        run: |
          dvc pull -r origin

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run tests
        run: |
          poetry run poe test_api

      - name: Process data
        run: |
          poetry run poe process_data

      - name: Commit and push processed data
        run: |
          dvc add data
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git pull
          git diff-index --quiet HEAD || (git commit -a -m "action: process latest data" --allow-empty)
          dvc push -r origin
          git push

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_process
        run: echo "SHA_PROCESS=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  validation:
    runs-on: ubuntu-latest
    needs: process

    outputs:
      sha_new: ${{ steps.sha_new.outputs.SHA_NEW }}

    steps:
      - env:
          SHA_FETCH: ${{ needs.fetch.outputs.sha_new }}
          SHA_PROCESS: ${{ needs.process.outputs.sha_process }}
        run: echo "$SHA_PROCESS"

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Prerequisites
        run: |
          python -m pip install --upgrade pip
          pip install  poetry 
          pip install dvc[s3]

      - name: DVC setup
        run: |
          dvc remote modify origin --local access_key_id ${{ secrets.DVC_ACCESS_KEY_ID }}
          dvc remote modify origin --local secret_access_key ${{ secrets.DVC_SECRET_ACCESS_KEY }}

      - name: Pull data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull

      - name: DVC pull
        run: |
          dvc pull -r origin

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Get reference data
        run: |
          dvc get . data/processed/current_data.csv --rev $SHA_FETCH --out data/processed/reference_data.csv --force

      - name: Run validation
        run: |
          poetry run poe validate

      - name: Run Data Drift
        run: |
          poetry run poe data_drift

      - name: Run Stability tests
        run: |
          poetry run poe stability_tests

      - name: Run Kolmogorov-Smirnov test
        run: |
          poetry run poe ks_test

      - name: Deploy DataDocs to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "reports/sites"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Commit and push processed data
        run: |
          dvc add data
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git pull
          git diff-index --quiet HEAD || (git commit -a -m "action: validate latest data" --allow-empty)
          dvc push -r origin
          git push

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  train:
    runs-on: ubuntu-latest
    needs: validation

    steps:
      - env:
          SHA_NEW: ${{ needs.validation.outputs.sha_new }}
        run: echo "$SHA_NEW"

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Prerequisites
        run: |
          python -m pip install --upgrade pip
          pip install  poetry 
          pip install dvc[s3]

      - name: DVC setup
        run: |
          dvc remote modify origin --local access_key_id ${{ secrets.DVC_ACCESS_KEY_ID }}
          dvc remote modify origin --local secret_access_key ${{ secrets.DVC_SECRET_ACCESS_KEY }}

      - name: Pull data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull

      - name: DVC pull
        run: |
          dvc pull -r origin

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Split data
        run: |
          poetry run poe split_data

      - name: Validation train
        run: |
          poetry run poe train_validation

      - name: Validation predict
        run: |
          poetry run poe predict_validation

      - name: Commit and push processed data
        run: |
          dvc add data
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git pull
          git diff-index --quiet HEAD || (git commit -a -m "action: validation train and predict" --allow-empty)
          dvc push -r origin
          git push

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"